---
name: Build and Release

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  check_pr_merged:
    runs-on: ubuntu-latest
    outputs:
      is_merged: ${{ steps.check_merged.outputs.is_merged }}
    steps:
      - name: Check if PR is merged
        id: check_merged
        run: echo "::set-output name=is_merged::${{ github.event.pull_request.merged }}"

  build-and-ver:
    needs: check_pr_merged
    if: needs.check_pr_merged.outputs.is_merged == 'true'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create and Push Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: master
          default_bump: minor
          create_annotated_tag: true

      - name: Print the new tags
        run: |
          echo "TAG: ${{steps.create_tag.outputs.new_tag}}"
          VERSION=$(echo ${{ steps.create_tag.outputs.new_tag }} | sed 's/^v//')
          echo "VERSION: $VERSION"


      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.2'
      - name: Install fyne-cross
        run: go install github.com/fyne-io/fyne-cross@latest
          #      - name: Install cmake v3.14.5 for osxcross
          #        run: |
          #          curl -sSL https://cmake.org/files/v3.14/cmake-3.14.5-Linux-x86_64.tar.gz | sudo tar -xzC /opt
          #          export PATH=/opt/cmake-3.14.5-Linux-x86_64/bin:$PATH
          #
          #      - name: Install dependencies for osxcross
          #        run: |
          #          sudo apt-get update
          #          sudo apt-get install -y clang llvm libxml2-dev uuid-dev libssl-dev bash patch make tar xz-utils bzip2 gzip sed cpio
          #
          #      - name: Clone and setup osxcross
          #        run: |
          #          git clone https://github.com/tpoechtrager/osxcross.git
          #          cd osxcross
          #          wget --no-check-certificate -O MacOSX10.15.sdk.tar.xz https://someserver.com/path/to/MacOSX10.15.sdk.tar.xz
          #          tar -xf MacOSX10.15.sdk.tar.xz -C tarballs/
          #          UNATTENDED=yes OSX_VERSION_MIN=10.10 ./build.sh
          #
      - name: Cross-compile for Linux ARM64
        run: fyne-cross linux -arch=arm64 -app-id=com.kira.kensho

      - name: Cross-compile for Linux x86
        run: fyne-cross linux -arch=amd64 -app-id=com.kira.kensho

          #      - name: Cross-compile for Darwin ARM64
          #        run: |
          #          export PATH=$PWD/osxcross/target/bin:$PATH
          #          fyne-cross darwin -arch=arm64 -app-id=com.kira.kensho
          #
          #      - name: Cross-compile for Darwin x86
          #        run: |
          #          export PATH=$PWD/osxcross/target/bin:$PATH
          #          fyne-cross darwin -arch=amd64 -app-id=com.kira.kensho
          #
      - name: Cross-compile for Windows ARM64
        run: fyne-cross windows -arch=arm64 -app-id=com.kira.kensho

      - name: Cross-compile for Windows x86
        run: fyne-cross windows -arch=amd64 -app-id=com.kira.kensho

      - name: Install packaging tools
        run: sudo apt-get update && sudo apt-get install -y debhelper

      - name: Setup DEBIAN directory for AMD64
        run: |
          mkdir -p build-amd64/DEBIAN
          VERSION=$(echo ${{ steps.create_tag.outputs.new_tag }} | sed 's/^v//')
          echo "Package: kensho" > build-amd64/DEBIAN/control
          echo "Version: $VERSION" >> build-amd64/DEBIAN/control
          echo "Section: base" >> build-amd64/DEBIAN/control
          echo "Priority: optional" >> build-amd64/DEBIAN/control
          echo "Architecture: amd64" >> build-amd64/DEBIAN/control
          echo "Depends: " >> build-amd64/DEBIAN/control
          echo "Maintainer: KIRA <hello@kira.network>" >> build-amd64/DEBIAN/control
          echo "Description: KENSHO" >> build-amd64/DEBIAN/control

      - name: Setup DEBIAN directory for ARM64
        run: |
          mkdir -p build-arm64/DEBIAN
          VERSION=$(echo ${{ steps.create_tag.outputs.new_tag }} | sed 's/^v//')
          echo "Package: kensho" > build-arm64/DEBIAN/control
          echo "Version: $VERSION" >> build-arm64/DEBIAN/control
          echo "Section: base" >> build-arm64/DEBIAN/control
          echo "Priority: optional" >> build-arm64/DEBIAN/control
          echo "Architecture: arm64" >> build-arm64/DEBIAN/control
          echo "Depends: " >> build-arm64/DEBIAN/control
          echo "Maintainer: KIRA <hello@kira.network>" >> build-arm64/DEBIAN/control
          echo "Description: KENSHO" >> build-arm64/DEBIAN/control

      - name: Copy application to build directory for AMD64
        run: cp fyne-cross/dist/linux-amd64/Kensho.tar.xz build-amd64/kensho

      - name: Copy application to build directory for ARM64
        run: cp fyne-cross/dist/linux-arm64/Kensho.tar.xz build-arm64/kensho

      - name: Build DEB package for AMD64
        run: dpkg-deb --build build-amd64 kensho-amd64.deb

      - name: Build DEB package for ARM64
        run: dpkg-deb --build build-arm64 kensho-arm64.deb

      - name: Upload AMD64 DEB Package as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./kensho-amd64.deb
          asset_name: kensho-amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload ARM64 DEB Package as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./kensho-arm64.deb
          asset_name: kensho-arm64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Windows AMD64 EXE Package as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./fyne-cross/dist/windows-amd64/Kensho.exe.zip
          asset_name: Kensho-windows-amd64.zip
          asset_content_type: application/zip

      - name: Upload Windows ARM64 EXE Package as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./fyne-cross/dist/windows-arm64/Kensho.exe.zip
          asset_name: Kensho-windows-arm64.zip
          asset_content_type: application/zip

  release:
    needs: build
    if: needs.build.outputs.asset_path != ''
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.new_version }}
          release_name: Release ${{ needs.versioning.outputs.new_version }}
          draft: false
          prerelease: false
